// Code generated by entc, DO NOT EDIT.

package todoitem

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the todoitem type in the database.
	Label = "todo_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldIsDone holds the string denoting the is_done field in the database.
	FieldIsDone = "is_done"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// Table holds the table name of the todoitem in the database.
	Table = "todo_items"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "todo_items"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "project_items"
)

// Columns holds all SQL columns for todoitem fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldIsDone,
	FieldCreatedAt,
	FieldUUID,
	FieldOwnerID,
	FieldDescription,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "todo_items"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"project_items",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsDone holds the default value on creation for the "is_done" field.
	DefaultIsDone bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUUID holds the default value on creation for the "uuid" field.
	DefaultUUID func() uuid.UUID
)
