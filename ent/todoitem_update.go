// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/glyphack/koal/ent/predicate"
	"github.com/glyphack/koal/ent/project"
	"github.com/glyphack/koal/ent/todoitem"
	"github.com/google/uuid"
)

// TodoItemUpdate is the builder for updating TodoItem entities.
type TodoItemUpdate struct {
	config
	hooks    []Hook
	mutation *TodoItemMutation
}

// Where appends a list predicates to the TodoItemUpdate builder.
func (tiu *TodoItemUpdate) Where(ps ...predicate.TodoItem) *TodoItemUpdate {
	tiu.mutation.Where(ps...)
	return tiu
}

// SetTitle sets the "title" field.
func (tiu *TodoItemUpdate) SetTitle(s string) *TodoItemUpdate {
	tiu.mutation.SetTitle(s)
	return tiu
}

// SetIsDone sets the "is_done" field.
func (tiu *TodoItemUpdate) SetIsDone(b bool) *TodoItemUpdate {
	tiu.mutation.SetIsDone(b)
	return tiu
}

// SetNillableIsDone sets the "is_done" field if the given value is not nil.
func (tiu *TodoItemUpdate) SetNillableIsDone(b *bool) *TodoItemUpdate {
	if b != nil {
		tiu.SetIsDone(*b)
	}
	return tiu
}

// SetCreatedAt sets the "created_at" field.
func (tiu *TodoItemUpdate) SetCreatedAt(t time.Time) *TodoItemUpdate {
	tiu.mutation.SetCreatedAt(t)
	return tiu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tiu *TodoItemUpdate) SetNillableCreatedAt(t *time.Time) *TodoItemUpdate {
	if t != nil {
		tiu.SetCreatedAt(*t)
	}
	return tiu
}

// SetUUID sets the "uuid" field.
func (tiu *TodoItemUpdate) SetUUID(u uuid.UUID) *TodoItemUpdate {
	tiu.mutation.SetUUID(u)
	return tiu
}

// SetOwnerID sets the "owner_id" field.
func (tiu *TodoItemUpdate) SetOwnerID(s string) *TodoItemUpdate {
	tiu.mutation.SetOwnerID(s)
	return tiu
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (tiu *TodoItemUpdate) SetProjectID(id int) *TodoItemUpdate {
	tiu.mutation.SetProjectID(id)
	return tiu
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (tiu *TodoItemUpdate) SetNillableProjectID(id *int) *TodoItemUpdate {
	if id != nil {
		tiu = tiu.SetProjectID(*id)
	}
	return tiu
}

// SetProject sets the "project" edge to the Project entity.
func (tiu *TodoItemUpdate) SetProject(p *Project) *TodoItemUpdate {
	return tiu.SetProjectID(p.ID)
}

// Mutation returns the TodoItemMutation object of the builder.
func (tiu *TodoItemUpdate) Mutation() *TodoItemMutation {
	return tiu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (tiu *TodoItemUpdate) ClearProject() *TodoItemUpdate {
	tiu.mutation.ClearProject()
	return tiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tiu *TodoItemUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tiu.hooks) == 0 {
		affected, err = tiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TodoItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tiu.mutation = mutation
			affected, err = tiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tiu.hooks) - 1; i >= 0; i-- {
			if tiu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tiu *TodoItemUpdate) SaveX(ctx context.Context) int {
	affected, err := tiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tiu *TodoItemUpdate) Exec(ctx context.Context) error {
	_, err := tiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tiu *TodoItemUpdate) ExecX(ctx context.Context) {
	if err := tiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tiu *TodoItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   todoitem.Table,
			Columns: todoitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: todoitem.FieldID,
			},
		},
	}
	if ps := tiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tiu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: todoitem.FieldTitle,
		})
	}
	if value, ok := tiu.mutation.IsDone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: todoitem.FieldIsDone,
		})
	}
	if value, ok := tiu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: todoitem.FieldCreatedAt,
		})
	}
	if value, ok := tiu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: todoitem.FieldUUID,
		})
	}
	if value, ok := tiu.mutation.OwnerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: todoitem.FieldOwnerID,
		})
	}
	if tiu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   todoitem.ProjectTable,
			Columns: []string{todoitem.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   todoitem.ProjectTable,
			Columns: []string{todoitem.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{todoitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TodoItemUpdateOne is the builder for updating a single TodoItem entity.
type TodoItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TodoItemMutation
}

// SetTitle sets the "title" field.
func (tiuo *TodoItemUpdateOne) SetTitle(s string) *TodoItemUpdateOne {
	tiuo.mutation.SetTitle(s)
	return tiuo
}

// SetIsDone sets the "is_done" field.
func (tiuo *TodoItemUpdateOne) SetIsDone(b bool) *TodoItemUpdateOne {
	tiuo.mutation.SetIsDone(b)
	return tiuo
}

// SetNillableIsDone sets the "is_done" field if the given value is not nil.
func (tiuo *TodoItemUpdateOne) SetNillableIsDone(b *bool) *TodoItemUpdateOne {
	if b != nil {
		tiuo.SetIsDone(*b)
	}
	return tiuo
}

// SetCreatedAt sets the "created_at" field.
func (tiuo *TodoItemUpdateOne) SetCreatedAt(t time.Time) *TodoItemUpdateOne {
	tiuo.mutation.SetCreatedAt(t)
	return tiuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tiuo *TodoItemUpdateOne) SetNillableCreatedAt(t *time.Time) *TodoItemUpdateOne {
	if t != nil {
		tiuo.SetCreatedAt(*t)
	}
	return tiuo
}

// SetUUID sets the "uuid" field.
func (tiuo *TodoItemUpdateOne) SetUUID(u uuid.UUID) *TodoItemUpdateOne {
	tiuo.mutation.SetUUID(u)
	return tiuo
}

// SetOwnerID sets the "owner_id" field.
func (tiuo *TodoItemUpdateOne) SetOwnerID(s string) *TodoItemUpdateOne {
	tiuo.mutation.SetOwnerID(s)
	return tiuo
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (tiuo *TodoItemUpdateOne) SetProjectID(id int) *TodoItemUpdateOne {
	tiuo.mutation.SetProjectID(id)
	return tiuo
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (tiuo *TodoItemUpdateOne) SetNillableProjectID(id *int) *TodoItemUpdateOne {
	if id != nil {
		tiuo = tiuo.SetProjectID(*id)
	}
	return tiuo
}

// SetProject sets the "project" edge to the Project entity.
func (tiuo *TodoItemUpdateOne) SetProject(p *Project) *TodoItemUpdateOne {
	return tiuo.SetProjectID(p.ID)
}

// Mutation returns the TodoItemMutation object of the builder.
func (tiuo *TodoItemUpdateOne) Mutation() *TodoItemMutation {
	return tiuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (tiuo *TodoItemUpdateOne) ClearProject() *TodoItemUpdateOne {
	tiuo.mutation.ClearProject()
	return tiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tiuo *TodoItemUpdateOne) Select(field string, fields ...string) *TodoItemUpdateOne {
	tiuo.fields = append([]string{field}, fields...)
	return tiuo
}

// Save executes the query and returns the updated TodoItem entity.
func (tiuo *TodoItemUpdateOne) Save(ctx context.Context) (*TodoItem, error) {
	var (
		err  error
		node *TodoItem
	)
	if len(tiuo.hooks) == 0 {
		node, err = tiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TodoItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tiuo.mutation = mutation
			node, err = tiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tiuo.hooks) - 1; i >= 0; i-- {
			if tiuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tiuo *TodoItemUpdateOne) SaveX(ctx context.Context) *TodoItem {
	node, err := tiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tiuo *TodoItemUpdateOne) Exec(ctx context.Context) error {
	_, err := tiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tiuo *TodoItemUpdateOne) ExecX(ctx context.Context) {
	if err := tiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tiuo *TodoItemUpdateOne) sqlSave(ctx context.Context) (_node *TodoItem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   todoitem.Table,
			Columns: todoitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: todoitem.FieldID,
			},
		},
	}
	id, ok := tiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TodoItem.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, todoitem.FieldID)
		for _, f := range fields {
			if !todoitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != todoitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tiuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: todoitem.FieldTitle,
		})
	}
	if value, ok := tiuo.mutation.IsDone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: todoitem.FieldIsDone,
		})
	}
	if value, ok := tiuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: todoitem.FieldCreatedAt,
		})
	}
	if value, ok := tiuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: todoitem.FieldUUID,
		})
	}
	if value, ok := tiuo.mutation.OwnerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: todoitem.FieldOwnerID,
		})
	}
	if tiuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   todoitem.ProjectTable,
			Columns: []string{todoitem.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   todoitem.ProjectTable,
			Columns: []string{todoitem.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: project.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TodoItem{config: tiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{todoitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
