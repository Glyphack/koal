// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/glyphack/koal/ent/project"
	"github.com/glyphack/koal/ent/todoitem"
	"github.com/google/uuid"
)

// TodoItem is the model entity for the TodoItem schema.
type TodoItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// IsDone holds the value of the "is_done" field.
	IsDone bool `json:"is_done,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid,omitempty"`
	// OwnerID holds the value of the "owner_id" field.
	OwnerID string `json:"owner_id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TodoItemQuery when eager-loading is set.
	Edges         TodoItemEdges `json:"edges"`
	project_items *int
}

// TodoItemEdges holds the relations/edges for other nodes in the graph.
type TodoItemEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TodoItemEdges) ProjectOrErr() (*Project, error) {
	if e.loadedTypes[0] {
		if e.Project == nil {
			// The edge project was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: project.Label}
		}
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TodoItem) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case todoitem.FieldIsDone:
			values[i] = new(sql.NullBool)
		case todoitem.FieldID:
			values[i] = new(sql.NullInt64)
		case todoitem.FieldTitle, todoitem.FieldOwnerID, todoitem.FieldDescription:
			values[i] = new(sql.NullString)
		case todoitem.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case todoitem.FieldUUID:
			values[i] = new(uuid.UUID)
		case todoitem.ForeignKeys[0]: // project_items
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TodoItem", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TodoItem fields.
func (ti *TodoItem) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case todoitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ti.ID = int(value.Int64)
		case todoitem.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ti.Title = value.String
			}
		case todoitem.FieldIsDone:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_done", values[i])
			} else if value.Valid {
				ti.IsDone = value.Bool
			}
		case todoitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ti.CreatedAt = value.Time
			}
		case todoitem.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				ti.UUID = *value
			}
		case todoitem.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				ti.OwnerID = value.String
			}
		case todoitem.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ti.Description = value.String
			}
		case todoitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field project_items", value)
			} else if value.Valid {
				ti.project_items = new(int)
				*ti.project_items = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryProject queries the "project" edge of the TodoItem entity.
func (ti *TodoItem) QueryProject() *ProjectQuery {
	return (&TodoItemClient{config: ti.config}).QueryProject(ti)
}

// Update returns a builder for updating this TodoItem.
// Note that you need to call TodoItem.Unwrap() before calling this method if this TodoItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (ti *TodoItem) Update() *TodoItemUpdateOne {
	return (&TodoItemClient{config: ti.config}).UpdateOne(ti)
}

// Unwrap unwraps the TodoItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ti *TodoItem) Unwrap() *TodoItem {
	tx, ok := ti.config.driver.(*txDriver)
	if !ok {
		panic("ent: TodoItem is not a transactional entity")
	}
	ti.config.driver = tx.drv
	return ti
}

// String implements the fmt.Stringer.
func (ti *TodoItem) String() string {
	var builder strings.Builder
	builder.WriteString("TodoItem(")
	builder.WriteString(fmt.Sprintf("id=%v", ti.ID))
	builder.WriteString(", title=")
	builder.WriteString(ti.Title)
	builder.WriteString(", is_done=")
	builder.WriteString(fmt.Sprintf("%v", ti.IsDone))
	builder.WriteString(", created_at=")
	builder.WriteString(ti.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", uuid=")
	builder.WriteString(fmt.Sprintf("%v", ti.UUID))
	builder.WriteString(", owner_id=")
	builder.WriteString(ti.OwnerID)
	builder.WriteString(", description=")
	builder.WriteString(ti.Description)
	builder.WriteByte(')')
	return builder.String()
}

// TodoItems is a parsable slice of TodoItem.
type TodoItems []*TodoItem

func (ti TodoItems) config(cfg config) {
	for _i := range ti {
		ti[_i].config = cfg
	}
}
